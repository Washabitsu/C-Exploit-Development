#include <iostream>
#include <dirent.h>
#include <sys/types.h>
#include <string.h>
#include <vector>
#include <unistd.h>
#include <sys/socket.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <string>

using namespace std;

void ShowDirectory(const char* path,string ip_addr,int port);
void Send_Over_TCP(string ipAddress,int port,vector<string> file_names);

int main(int argc,char *argv[]){
    if(argc < 4){
        string path;
        string ip;
        int port;
        cout << "Enter path : ";
        cin >> path;
        cout << "Enter ip : ";
        cin >> ip;
        cout << "Enter port : ";
        cin >> port;
        ShowDirectory(path.c_str(),ip,port);
    }
    else
        ShowDirectory(argv[1],argv[2],atoi(argv[3]));
    
    //Search_For_Flag_Linux(path.c_str());
}

void ShowDirectory(const char* path,string ip_addr,int port){
    DIR *dr;
    struct dirent *en;
    dr = opendir(path);
    if(dr){
        vector<string> files;
        while((en = readdir(dr)) != NULL)
            files.push_back(en->d_name);
        
        Send_Over_TCP(ip_addr,port,files);
        closedir(dr);
    }
}

void Send_Over_TCP(string ipAddress,int port,vector<string> file_names){
    
    int sock = socket(AF_INET, SOCK_STREAM, 0);
    if (sock == -1)
        return ;

    sockaddr_in hint;
    hint.sin_family = AF_INET;
    hint.sin_port = htons(port);
    inet_pton(AF_INET, ipAddress.c_str(), &hint.sin_addr);

    //	Connect to the server on the socket
    int connectRes = connect(sock, (sockaddr*)&hint, sizeof(hint));
    if (connectRes == -1)
        return ;
    
    for(int i = 0;i < file_names.size();i++)
    {
        //	Send to server
        int sendRes = send(sock, file_names[i].c_str() , file_names[i].size() + 1, 0);
        send(sock, "\n", 2, 0);
        if (sendRes == -1)
            cout << "Could not send to server! Whoops!\r\n";
    }
    //	Close the socket
    close(sock);
}
